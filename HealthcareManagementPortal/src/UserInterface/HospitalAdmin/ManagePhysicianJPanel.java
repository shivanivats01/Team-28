/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.HospitalAdmin;

import Business.Department.Department;
import Business.Doctor.Doctor;
import Business.Doctor.DoctorDirectory;
import Business.Ecosystem;
import Business.Hospital.Hospital;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author riyamoitra
 */
public class ManagePhysicianJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePhysicianJPanel
     */
    private JPanel CardLayoutJPanel;
    private Hospital hospital;
    private Department department;
    private Ecosystem business;
    
    public ManagePhysicianJPanel() {
        initComponents();
    }

    public ManagePhysicianJPanel(JPanel CardLayoutJPanel, Hospital hospital, Department department, Ecosystem business) {

        initComponents();
        this.CardLayoutJPanel = CardLayoutJPanel;
        this.hospital = hospital;
        this.department = department;
        this.business = business;
        
        populateTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        physicianTable = new javax.swing.JTable();
        refreshBtn = new javax.swing.JButton();
        createPhysiciansBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        viewPhysicianBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        backBtn.setText("<back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("Manage Physicians");

        physicianTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Physician ID", "Physician Name", "Contact Number", "Gender", "Email ID", "License Number"
            }
        ));
        jScrollPane1.setViewportView(physicianTable);

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        createPhysiciansBtn.setText("Add New Physician");
        createPhysiciansBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPhysiciansBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Remove Physician");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        viewPhysicianBtn.setText("View Details");
        viewPhysicianBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPhysicianBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addGap(58, 58, 58)
                                .addComponent(jLabel1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 33, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refreshBtn)
                            .addComponent(createPhysiciansBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                        .addComponent(viewPhysicianBtn)
                        .addGap(115, 115, 115))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backBtn))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(refreshBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createPhysiciansBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewPhysicianBtn)
                        .addGap(27, 27, 27)))
                .addComponent(deleteBtn)
                .addContainerGap(56, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        CardLayoutJPanel.remove(this);
        CardLayout layout = (CardLayout) CardLayoutJPanel.getLayout();
        layout.previous(CardLayoutJPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void createPhysiciansBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPhysiciansBtnActionPerformed
        // TODO add your handling code here:
//        CreatePhysicianJPanel createPhysicianJPanel = new CreatePhysicianJPanel(CardLayoutJPanel, account, business);
//        CardLayoutJPanel.add("createPhysicianJPanel", createPhysicianJPanel);
//        CardLayout layout = (CardLayout) CardLayoutJPanel.getLayout();
//        layout.next(CardLayoutJPanel);
    }//GEN-LAST:event_createPhysiciansBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int row = physicianTable.getSelectedRow();

        if(row<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Doctor selectedDoctor = (Doctor) physicianTable.getValueAt(row, 0);
        business.getDoctorDirectory().deleteDoctor(selectedDoctor.getDoctorId(), business);
       

        populateTable();
    }//GEN-LAST:event_deleteBtnActionPerformed

    public void populateTable() {
        // populate all patients in patient directory
        
        ArrayList<Doctor> doctorList = new ArrayList();
        if(department == null) {
           for(Department d : this.hospital.getDepartmentDirectory().getDepartmentList()) {
                doctorList.addAll(d.getDoctorDirectory().getDoctorList());
            } 
        } else {
            doctorList.addAll(this.department.getDoctorDirectory().getDoctorList());
        }
        
        
        int rowCount = physicianTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel)physicianTable.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        }
        
        for(Doctor d : doctorList) {
            Object row[] = new Object[6];
            row[0] = d;
            row[1] = d.getName();
            row[2] = d.getPhoneNo();
            row[3] = d.getGender();
            row[4] = d.getEmailId();
            row[5] = d.getLicenseNo();
           
            model.addRow(row);
        }
    }
    
    private void viewPhysicianBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPhysicianBtnActionPerformed
        // TODO add your handling code here:

        int row = physicianTable.getSelectedRow();

        if(row<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //System.out.println("=========== >> " + physicianTable.getValueAt(row, 0));

        Doctor viewDoctor = (Doctor) physicianTable.getValueAt(row, 0);

        PhysicianInfoJPanel physicianInfoJPanel = new PhysicianInfoJPanel(CardLayoutJPanel, viewDoctor);
        CardLayoutJPanel.add("physicianInfoJPanel", physicianInfoJPanel);
        CardLayout layout = (CardLayout) CardLayoutJPanel.getLayout();
        layout.next(CardLayoutJPanel);
    }//GEN-LAST:event_viewPhysicianBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton createPhysiciansBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable physicianTable;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton viewPhysicianBtn;
    // End of variables declaration//GEN-END:variables
}
