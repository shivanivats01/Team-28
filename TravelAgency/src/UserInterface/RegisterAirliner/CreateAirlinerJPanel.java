/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.RegisterAirliner;

import Business.AirlinerDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import Business.Airliner;
import java.awt.Component;

/**
 *
 * @author jshar
 */
public class CreateAirlinerJPanel extends javax.swing.JPanel {

    private JPanel CardSequenceJPanel;
    private AirlinerDirectory airlineDirectory;
    /**
     * Creates new form CreateAirlinerJPanel
     */
    public CreateAirlinerJPanel(JPanel CardSequenceJPanel, AirlinerDirectory airlineDirectory) {
        initComponents();
        this.CardSequenceJPanel = CardSequenceJPanel;
        this.airlineDirectory = airlineDirectory;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtAirlinerName = new javax.swing.JTextField();
        txtTotalEmployees = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Airliner Name:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Total Employees:");

        txtAirlinerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAirlinerNameActionPerformed(evt);
            }
        });

        txtTotalEmployees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalEmployeesActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel6.setText("Create New Airliner");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(txtTotalEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(387, 387, 387)
                        .addComponent(txtAirlinerName, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(489, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel6)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAirlinerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(txtTotalEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnCreate))
                .addContainerGap(346, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtAirlinerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAirlinerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAirlinerNameActionPerformed

    private void txtTotalEmployeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalEmployeesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalEmployeesActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequenceJPanel.remove(this);
        Component[] componentArray = CardSequenceJPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        RegisterAirlinerJPanel manageAirlineJPanel = (RegisterAirlinerJPanel) component;
        manageAirlineJPanel.refreshTable();
        CardLayout layout = (CardLayout) CardSequenceJPanel.getLayout();
        layout.previous(CardSequenceJPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        Airliner airliner = airlineDirectory.newAirliner();
        int totalFlights, internationalFlights, domesticFlights, totalEmployees;
        String airlinerName = txtAirlinerName.getText();
        if(airlinerName.isEmpty()) {
            JOptionPane.showMessageDialog(null,"Airliner name text field cannot be empty");
            return;
        }
        
        for(Airliner a : airlineDirectory.getAirlineList()) {
            if(airlinerName.equals(a.getAirlineName())) {
                JOptionPane.showMessageDialog(null,"Airliner name already exist");
                return;
            }
        }
        
//        try {
//            if(txtTotalFlights.getText().isEmpty()) {
//                JOptionPane.showMessageDialog(null,"Total flights text field cannot be empty");
//                return;
//            }
//            totalFlights = Integer.parseInt(txtTotalFlights.getText());
//            if(totalFlights < 0) {
//                JOptionPane.showMessageDialog(null,"Total Flights text field cannot have negative value");
//                return;
//            }
//            else if(totalFlights % 1 != 0) {
//                JOptionPane.showMessageDialog(null, "Total Flights text field must have integer value only");
//                return;
//            }  
//        } catch(Exception e) {
//            JOptionPane.showMessageDialog(null,"Total Flights must be an integer");
//            return;
//        }
        
//        try {
//            if(txtDomesticFligths.getText().isEmpty()) {
//                JOptionPane.showMessageDialog(null,"Domestic Flight text field cannot be empty");
//                return;
//            }
//            domesticFlights = Integer.parseInt(txtDomesticFligths.getText());
//            if(domesticFlights < 0) {
//                JOptionPane.showMessageDialog(null,"Domestic Flights text field cannot have negative value");
//                return;
//            }
//            else if(domesticFlights % 1 != 0) {
//                JOptionPane.showMessageDialog(null, "Domestic Flights text field must have integer value only");
//                return;
//            }
//        } catch(Exception e) {
//            JOptionPane.showMessageDialog(null,"Domestic Flights text field must have integer value only");
//            return;
//        }
//        
//        try {
//            if(txtInternationalFligths.getText().isEmpty()) {
//                JOptionPane.showMessageDialog(null,"International Flights text field cannot be empty");
//                return;
//            }
//            internationalFlights = Integer.parseInt(txtInternationalFligths.getText());
//            if(internationalFlights < 0) {
//                JOptionPane.showMessageDialog(null,"International Flights text field cannot have negative value");
//                return;
//            }
//            else if(internationalFlights % 1 != 0) {
//                JOptionPane.showMessageDialog(null, "International Flights text field must have integer value only");
//                return;
//            } 
//        } catch(Exception e) {
//            JOptionPane.showMessageDialog(null,"International Flights text field must have integer value only");
//            return;
//        }
        
        try {
            if(txtTotalEmployees.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null,"Total Employees text field cannot be empty");
                return;
            }
            totalEmployees = Integer.parseInt(txtTotalEmployees.getText());
            if(totalEmployees < 0) {
                JOptionPane.showMessageDialog(null,"Total Employees text field cannot have negative value");
                return;
            }
            else if(totalEmployees % 1 != 0) {
                JOptionPane.showMessageDialog(null, "Total Employees text field must have integer value only");
                return;
            }   
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Total Employees text field must have integer values only");
            return;
        }
        
//        if(totalFlights != domesticFlights + internationalFlights) {
//            JOptionPane.showMessageDialog(null, "Total Flight must be equal to Domestic Flights and International Flights");
//            return;
//        }
        
          airliner.setAirlineName(txtAirlinerName.getText());
//        airliner.setNumberOfAirplane(totalFlights);
//        airliner.setDomesticAirplane(domesticFlights);
//        airliner.setInternationalAirplane(internationalFlights);
          airliner.setNumberOfEmployees(totalEmployees);
          JOptionPane.showMessageDialog(null, "Airliner Added!!!!!", "Info", JOptionPane.INFORMATION_MESSAGE);
        
        
    }//GEN-LAST:event_btnCreateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtAirlinerName;
    private javax.swing.JTextField txtTotalEmployees;
    // End of variables declaration//GEN-END:variables
}
